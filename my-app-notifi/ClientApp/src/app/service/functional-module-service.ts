/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken, Injector } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';
import { ObserveOnOperator } from 'rxjs/internal/operators/observeOn';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');
const injector =
    Injector.create({ providers: [{ provide: API_BASE_URL, useValue: 'http://localhost/UserAuthorization' }] });
@Injectable()
export class ApplicationModuleClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost/UserAuthorization";
        //  "https://localhost:5001";"https://localhost/UserAuthorization"
    }

    get2(moduleId: number): Observable<ApplicationModule[] | null> {
        let url_ = this.baseUrl + "/ApplicationModule/Get/2";
        console.log("Reading form url :" + url_);

        url_ = url_.replace("{moduleId}", encodeURIComponent("" + moduleId));
        url_ = url_.replace(/[?&]$/, "");

        let options2_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };


        return this.http.get<ApplicationModule[]>(url_);
    }

    /**
     * Gets list of modules its hierarchy tree
     */
    get(moduleId: number): Observable<IApplicationModule[] | null> {
        let url_ = this.baseUrl + "/ApplicationModule/Get/2";
        console.log("Reading form url :" + url_);

        if (moduleId === undefined || moduleId === null)
            throw new Error("The parameter 'moduleId' must be defined.");
        url_ = url_.replace("{moduleId}", encodeURIComponent("" + moduleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<ApplicationModule[] | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ApplicationModule[] | null>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<IApplicationModule[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as IApplicationModule[];
                    for (let item of resultData200)
                        result200!.push(ApplicationModule.fromJS(item));
                }
                return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ApplicationModule[] | null>(<any>null);
    }

    /**
     * Gets list of modules its hierarchy tree
     */
    getList(moduleId: number): Observable<ModuleAccessConfiguration | null> {
        let url_ = this.baseUrl + "/ApplicationModule/GetList/{moduleId}";
        if (moduleId === undefined || moduleId === null)
            throw new Error("The parameter 'moduleId' must be defined.");
        url_ = url_.replace("{moduleId}", encodeURIComponent("" + moduleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_: any) => {
            return this.processGetList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetList(<any>response_);
                } catch (e) {
                    return <Observable<ModuleAccessConfiguration | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<ModuleAccessConfiguration | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetList(response: HttpResponseBase): Observable<ModuleAccessConfiguration | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
                (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } };
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 ? ModuleAccessConfiguration.fromJS(resultData200) : <any>null;
                return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ModuleAccessConfiguration | null>(<any>null);
    }
}

/** Represents a module in application functionalities */
export class ApplicationModule implements IApplicationModule {
    /** Identifies a tree branch for the current module */
    treeIdentifier!: number;
    /** Level number of current module in module hierarchy tree */
    level!: number;
    /** Unique numeric Id of module */
    id!: number;
    /** Unique Module code */
    code?: string | undefined;
    /** Detailed description of module */
    description?: string | undefined;
    /** Default parent module */
    defaultParentModule?: ApplicationModule | undefined;
    /** Child Modules of current module */
    subModules?: ApplicationModule[] | undefined;

    //children?: ApplicationModule[] ;


    get hasChildren(): boolean {
        return this.subModules && this.subModules.length > 0;
    }


    constructor(data?: IApplicationModule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.treeIdentifier = _data["TreeIdentifier"];
            this.level = _data["Level"];
            this.id = _data["Id"];
            this.code = _data["Code"];
            this.description = _data["Description"];
            this.defaultParentModule = _data["DefaultParentModule"] ? ApplicationModule.fromJS(_data["DefaultParentModule"]) : <any>undefined;
            if (Array.isArray(_data["SubModules"])) {
                this.subModules = [] as any;
                for (let item of _data["SubModules"])
                    this.subModules!.push(ApplicationModule.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ApplicationModule {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationModule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["TreeIdentifier"] = this.treeIdentifier;
        data["Level"] = this.level;
        data["Id"] = this.id;
        data["Code"] = this.code;
        data["Description"] = this.description;
        data["DefaultParentModule"] = this.defaultParentModule ? this.defaultParentModule.toJSON() : <any>undefined;
        if (Array.isArray(this.subModules)) {
            data["SubModules"] = [];
            for (let item of this.subModules)
                data["SubModules"].push(item.toJSON());
        }
        return data;
    }
}

/** Represents a module in application functionalities */
export interface IApplicationModule {
    /** Identifies a tree branch for the current module */
    treeIdentifier: number;
    /** Level number of current module in module hierarchy tree */
    level: number;
    /** Unique numeric Id of module */
    id: number;
    /** Unique Module code */
    code?: string | undefined;
    /** Detailed description of module */
    description?: string | undefined;
    /** Default parent module */
    defaultParentModule?: ApplicationModule | undefined;
    /** Child Modules of current module */
    subModules?: ApplicationModule[] | undefined;

    hasChildren: boolean;
}

export class ModuleAccessConfiguration implements IModuleAccessConfiguration {
    accessConfiguration?: FunctionalityAccessConfiguration[] | undefined;
    listOfValuesTypes?: ListOfValuesAccessDataType[] | undefined;

    constructor(data?: IModuleAccessConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["AccessConfiguration"])) {
                this.accessConfiguration = [] as any;
                for (let item of _data["AccessConfiguration"])
                    this.accessConfiguration!.push(FunctionalityAccessConfiguration.fromJS(item));
            }
            if (Array.isArray(_data["ListOfValuesTypes"])) {
                this.listOfValuesTypes = [] as any;
                for (let item of _data["ListOfValuesTypes"])
                    this.listOfValuesTypes!.push(ListOfValuesAccessDataType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModuleAccessConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleAccessConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.accessConfiguration)) {
            data["AccessConfiguration"] = [];
            for (let item of this.accessConfiguration)
                data["AccessConfiguration"].push(item.toJSON());
        }
        if (Array.isArray(this.listOfValuesTypes)) {
            data["ListOfValuesTypes"] = [];
            for (let item of this.listOfValuesTypes)
                data["ListOfValuesTypes"].push(item.toJSON());
        }
        return data;
    }
}

export interface IModuleAccessConfiguration {
    accessConfiguration?: FunctionalityAccessConfiguration[] | undefined;
    listOfValuesTypes?: ListOfValuesAccessDataType[] | undefined;
}

export class FunctionalityAccessConfiguration implements IFunctionalityAccessConfiguration {
    /** Unique module Id of the configuration */
    moduleId!: number;
    accessGroups?: ModuleAccessGroup[] | undefined;

    constructor(data?: IFunctionalityAccessConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.moduleId = _data["ModuleId"];
            if (Array.isArray(_data["AccessGroups"])) {
                this.accessGroups = [] as any;
                for (let item of _data["AccessGroups"])
                    this.accessGroups!.push(ModuleAccessGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FunctionalityAccessConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new FunctionalityAccessConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ModuleId"] = this.moduleId;
        if (Array.isArray(this.accessGroups)) {
            data["AccessGroups"] = [];
            for (let item of this.accessGroups)
                data["AccessGroups"].push(item.toJSON());
        }
        return data;
    }
}

export interface IFunctionalityAccessConfiguration {
    /** Unique module Id of the configuration */
    moduleId: number;
    accessGroups?: ModuleAccessGroup[] | undefined;
}

export class ModuleAccessGroup implements IModuleAccessGroup {
    groupName?: string | undefined;
    accessConfiguration?: UserAccessConfiguration[] | undefined;

    constructor(data?: IModuleAccessGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.groupName = _data["GroupName"];
            if (Array.isArray(_data["AccessConfiguration"])) {
                this.accessConfiguration = [] as any;
                for (let item of _data["AccessConfiguration"])
                    this.accessConfiguration!.push(UserAccessConfiguration.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModuleAccessGroup {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleAccessGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["GroupName"] = this.groupName;
        if (Array.isArray(this.accessConfiguration)) {
            data["AccessConfiguration"] = [];
            for (let item of this.accessConfiguration)
                data["AccessConfiguration"].push(item.toJSON());
        }
        return data;
    }
}

export interface IModuleAccessGroup {
    groupName?: string | undefined;
    accessConfiguration?: UserAccessConfiguration[] | undefined;
}

/** Represents user access configuration of a module */
export class UserAccessConfiguration implements IUserAccessConfiguration {
    accessId!: number;
    accessDataTypeId!: number;
    /** Sets/gets preferred order of appearance of the item in access configuration screen */
    serialNumber?: number | undefined;
    /** Access description */
    description?: string | undefined;
    /** Default value of the access */
    defaultValue?: string | undefined;
    /** Json configuration for Superuser/Admin, if present */
    adminJson?: string | undefined;
    /** Default Json configuration for users, if present */
    defaultJson?: string | undefined;
    dependentAccess?: ModuleAccessGroup[] | undefined;

    constructor(data?: IUserAccessConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessId = _data["AccessId"];
            this.accessDataTypeId = _data["AccessDataTypeId"];
            this.serialNumber = _data["SerialNumber"];
            this.description = _data["Description"];
            this.defaultValue = _data["DefaultValue"];
            this.adminJson = _data["AdminJson"];
            this.defaultJson = _data["DefaultJson"];
            if (Array.isArray(_data["DependentAccess"])) {
                this.dependentAccess = [] as any;
                for (let item of _data["DependentAccess"])
                    this.dependentAccess!.push(ModuleAccessGroup.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserAccessConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new UserAccessConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["AccessId"] = this.accessId;
        data["AccessDataTypeId"] = this.accessDataTypeId;
        data["SerialNumber"] = this.serialNumber;
        data["Description"] = this.description;
        data["DefaultValue"] = this.defaultValue;
        data["AdminJson"] = this.adminJson;
        data["DefaultJson"] = this.defaultJson;
        if (Array.isArray(this.dependentAccess)) {
            data["DependentAccess"] = [];
            for (let item of this.dependentAccess)
                data["DependentAccess"].push(item.toJSON());
        }
        return data;
    }
}

/** Represents user access configuration of a module */
export interface IUserAccessConfiguration {
    accessId: number;
    accessDataTypeId: number;
    /** Sets/gets preferred order of appearance of the item in access configuration screen */
    serialNumber?: number | undefined;
    /** Access description */
    description?: string | undefined;
    /** Default value of the access */
    defaultValue?: string | undefined;
    /** Json configuration for Superuser/Admin, if present */
    adminJson?: string | undefined;
    /** Default Json configuration for users, if present */
    defaultJson?: string | undefined;
    dependentAccess?: ModuleAccessGroup[] | undefined;
}

export abstract class UserAccessType implements IUserAccessType {
    moduleId!: number;
    functionalityId!: number;
    userAccessTypeId!: number;
    dataType!: AccessRightDataType;

    constructor(data?: IUserAccessType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.moduleId = _data["ModuleId"];
            this.functionalityId = _data["FunctionalityId"];
            this.userAccessTypeId = _data["UserAccessTypeId"];
            this.dataType = _data["DataType"];
        }
    }

    static fromJS(data: any): UserAccessType {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'UserAccessType' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ModuleId"] = this.moduleId;
        data["FunctionalityId"] = this.functionalityId;
        data["UserAccessTypeId"] = this.userAccessTypeId;
        data["DataType"] = this.dataType;
        return data;
    }
}

export interface IUserAccessType {
    moduleId: number;
    functionalityId: number;
    userAccessTypeId: number;
    dataType: AccessRightDataType;
}

/** Represents user access datatype of a selection from a list */
export class ListOfValuesAccessDataType extends UserAccessType implements IListOfValuesAccessDataType {
    /** List of allowed values */
    listItems?: AccessRightListItem[] | undefined;

    constructor(data?: IListOfValuesAccessDataType) {
        super(data);
    }

    init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["ListItems"])) {
                this.listItems = [] as any;
                for (let item of _data["ListItems"])
                    this.listItems!.push(AccessRightListItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListOfValuesAccessDataType {
        data = typeof data === 'object' ? data : {};
        let result = new ListOfValuesAccessDataType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.listItems)) {
            data["ListItems"] = [];
            for (let item of this.listItems)
                data["ListItems"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

/** Represents user access datatype of a selection from a list */
export interface IListOfValuesAccessDataType extends IUserAccessType {
    /** List of allowed values */
    listItems?: AccessRightListItem[] | undefined;
}

/** Represents a access list item, for types that is list of selection */
export class AccessRightListItem implements IAccessRightListItem {
    /** Description of the right, as will be displayed on screen */
    description?: string | undefined;
    /** The internal value for the item */
    value?: string | undefined;

    constructor(data?: IAccessRightListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["Description"];
            this.value = _data["Value"];
        }
    }

    static fromJS(data: any): AccessRightListItem {
        data = typeof data === 'object' ? data : {};
        let result = new AccessRightListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Description"] = this.description;
        data["Value"] = this.value;
        return data;
    }
}

/** Represents a access list item, for types that is list of selection */
export interface IAccessRightListItem {
    /** Description of the right, as will be displayed on screen */
    description?: string | undefined;
    /** The internal value for the item */
    value?: string | undefined;
}

export enum AccessRightDataType {
    None = 0,
    Boolean = 1,
    Decimal = 2,
    ValueFromList = 3,
    NumericalRange = 4,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}