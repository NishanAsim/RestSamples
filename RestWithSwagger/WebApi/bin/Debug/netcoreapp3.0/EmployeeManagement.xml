<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EmployeeManagement</name>
    </assembly>
    <members>
        <member name="T:EmployeeManagement.Employee">
            <summary>
            Represents employee data
            </summary>
            <summary>
            Represents employee data
            </summary>
        </member>
        <member name="P:EmployeeManagement.Employee.Code">
            <summary>
            Employee code
            </summary>
            <value></value>
        </member>
        <member name="P:EmployeeManagement.Employee.Type">
            <summary>
            Type of the employee
            </summary>
        </member>
        <member name="P:EmployeeManagement.Employee.Name">
            <summary>
            Employee name
            </summary>
            <value></value>
        </member>
        <member name="P:EmployeeManagement.Employee.Note">
            <summary>
            Note on employee
            </summary>
            <value></value>
        </member>
        <member name="P:EmployeeManagement.Employee.Tasks">
            <summary>
            List of open tasks assigned to employee
            </summary>
        </member>
        <member name="T:EmployeeManagement.EmployeeOperations">
            <summary>
            Performs operations on employee data
            </summary>
        </member>
        <member name="M:EmployeeManagement.EmployeeOperations.#ctor">
            <summary>
            Initializes a new instance of employee management object 
            </summary>
        </member>
        <member name="M:EmployeeManagement.EmployeeOperations.GetEmployees">
            <summary>
            Gets a list of employee object
            </summary>
            <returns>List of employees</returns>
        </member>
        <member name="M:EmployeeManagement.EmployeeOperations.GetEmployee(System.String)">
            <summary>
            Finds an employee object based on employee id
            </summary>
            <param name="employeeId">Employee Id</param>
            <returns>Gets an Employee object if found, null otherwise </returns>
        </member>
        <member name="M:EmployeeManagement.EmployeeOperations.Add(EmployeeManagement.Employee)">
            <summary>
            Adds a new employee data to employee list
            </summary>
            <param name="employee">Reference of the new employee object</param>
            <returns>Reference of newly added employee object</returns>
        </member>
        <member name="M:EmployeeManagement.EmployeeOperations.Update(System.String,EmployeeManagement.Employee)">
            <summary>
            Removes the a task from employee object
            </summary>
            <param name="employeeId"></param>
            <param name="employee"></param>
            <returns></returns>
        </member>
        <member name="M:EmployeeManagement.EmployeeOperations.Delete(System.String)">
            <summary>
            Deletes an employee data from the collection
            </summary>
            <param name="employeeId">Unique employee Id</param>
            <returns></returns>
        </member>
        <member name="M:EmployeeManagement.EmployeeOperations.AddTask(System.String,EmployeeManagement.EmployeeTask)">
            <summary>
            Adds a new task to the employee object
            </summary>
            <param name="employeeId"></param>
            <param name="newTask"></param>
            <returns></returns>
        </member>
        <member name="M:EmployeeManagement.EmployeeOperations.RemoveTask(System.String,System.Guid)">
            <summary>
            Removes the a task from employee object
            </summary>
            <param name="employeeId"></param>
            <param name="taskId"></param>
            <returns></returns>
        </member>
        <member name="T:EmployeeManagement.EmployeeTask">
            <summary>
            Represents a task
            </summary>
        </member>
        <member name="P:EmployeeManagement.EmployeeTask.TaskId">
            <summary>
            Unique Id of the task
            </summary>
            <value></value>
        </member>
        <member name="P:EmployeeManagement.EmployeeTask.Description">
            <summary>
            Task description
            </summary>
            <value></value>
        </member>
        <member name="T:EmployeeManagement.EmployeeType">
            <summary>
            Employee type
            </summary>
        </member>
        <member name="F:EmployeeManagement.EmployeeType.None">
            <summary>
            Not Defined
            </summary>
        </member>
        <member name="F:EmployeeManagement.EmployeeType.Permanent">
            <summary>
            Permanent employee
            </summary>
        </member>
        <member name="F:EmployeeManagement.EmployeeType.OnProbation">
            <summary>
            Employee on probation
            </summary>
        </member>
        <member name="F:EmployeeManagement.EmployeeType.Contractual">
            <summary>
            On Contract
            </summary>
        </member>
        <member name="T:EmployeeManagement.IEmployeeOperations">
            <summary>
            Encapsulates actions on employee objects
            </summary>
        </member>
        <member name="M:EmployeeManagement.IEmployeeOperations.GetEmployee(System.String)">
            <summary>
            Finds an employee object based on employee id
            </summary>
            <param name="employeeId">Employee Id</param>
            <returns>Gets an Employee object if found, null otherwise </returns>
        </member>
        <member name="M:EmployeeManagement.IEmployeeOperations.GetEmployees">
            <summary>
            Gets a list of employee object
            </summary>
            <returns>List of employees</returns>
        </member>
        <member name="M:EmployeeManagement.IEmployeeOperations.Add(EmployeeManagement.Employee)">
            <summary>
            Adds a new employee data to employee list
            </summary>
            <param name="employee">Reference of the new employee object</param>
            <returns>Reference of newly added employee object</returns>
        </member>
        <member name="M:EmployeeManagement.IEmployeeOperations.Update(System.String,EmployeeManagement.Employee)">
            <summary>
            Updates an existing employee object
            </summary>
            <param name="employeeId">Employee Id whose data to be updated</param>
            <param name="employee">Reference of the object containing employee details</param>
            <returns>Reference of an object containing updated data, null if employee not found</returns>
        </member>
        <member name="M:EmployeeManagement.IEmployeeOperations.Delete(System.String)">
            <summary>
            Deletes an employee data from the collection
            </summary>
            <param name="employeeId">Unique employee Id</param>
            <returns></returns>
        </member>
        <member name="M:EmployeeManagement.IEmployeeOperations.AddTask(System.String,EmployeeManagement.EmployeeTask)">
            <summary>
            Adds a new task to the employee object
            </summary>
            <param name="employeeId"></param>
            <param name="newTask"></param>
            <returns></returns>
        </member>
        <member name="M:EmployeeManagement.IEmployeeOperations.RemoveTask(System.String,System.Guid)">
            <summary>
            Removes the a task from employee object
            </summary>
            <param name="employeeId"></param>
            <param name="taskId"></param>
            <returns></returns>
        </member>
    </members>
</doc>
